// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             String   @id
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  resetPasswordTokens ResetPasswordToken[]
  confirmEmailTokens  ConfirmEmailToken[]
  session             Session[]
  //providerAccount     ProviderAccount[]
}

//model ProviderAccount {
//  id                Int    @id @default(autoincrement())
//  userId            String
//  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//  provider          String
//  providerAccountId String
//
//  @@unique([provider, providerAccountId])
//}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             String?
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPasswordToken {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String   @unique
  expiresAt   DateTime
  sentTo      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model ConfirmEmailToken {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String   @unique
  expiresAt   DateTime
  sentTo      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model SignupToken {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String   @unique
  expiresAt   DateTime
  sentTo      String
}
